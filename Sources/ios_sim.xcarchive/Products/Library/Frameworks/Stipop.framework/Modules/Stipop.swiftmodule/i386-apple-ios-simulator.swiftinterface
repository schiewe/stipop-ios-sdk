// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Stipop
import Foundation
@_exported import Stipop
import Swift
import UIKit
@objc @_inheritsConvenienceInitializers public class SPUIPickerView : UIKit.UIInputView {
  weak public var delegate: SPDelegate? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect, inputViewStyle: UIKit.UIInputView.Style)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct SPPackage : Swift.Identifiable, Swift.Hashable, Swift.Codable {
  public static func == (lhs: SPPackage, rhs: SPPackage) -> Swift.Bool
  public var id: Swift.Int
  public var packageName: Swift.String?
  public var packageImg: Swift.String?
  public var packageCategory: Swift.String?
  public var packageKeywords: Swift.String?
  public var order: Swift.Int?
  public var artistName: Swift.String?
  public var language: Swift.String?
  public var stickers: [SPSticker]?
  public var isDownload: Swift.Bool? {
    get
    set
  }
  public init(id: Swift.Int)
  public func hash(into hasher: inout Swift.Hasher)
  public typealias ID = Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public protocol SPDelegate : AnyObject {
  var user: SPUser { get }
  func onStickerSelect(_ sticker: SPSticker)
}
public protocol SPUIButtonDelegate : SPDelegate {
  var viewType: SPViewType { get }
}
public enum SPViewType {
  case search
  case picker
  public static func == (a: SPViewType, b: SPViewType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class SPUIStickerView : UIKit.UIView {
  public func setSticker(_ sticker: SPSticker)
  public func setSticker(_ sticker: Swift.String)
  public func clearSticker()
  @objc override dynamic public func layoutSubviews()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Stipop {
  public static func initialize()
  public static var themeType: SPUIThemeType {
    get
    set
  }
  public static let bundle: Foundation.Bundle
  @objc deinit
}
public enum SPUIThemeType {
  case none
  case light
  case dark
  public static func == (a: SPUIThemeType, b: SPUIThemeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SPUser : Swift.Hashable {
  public var userID: Swift.String
  public var country: Swift.String
  public var language: Swift.String
  public init(userID: Swift.String, country: Swift.String, language: Swift.String)
  public init(userID: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SPUser, b: SPUser) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class SPUIPackageIconView : UIKit.UIView {
  public func setPackage(_ package: SPPackage)
  @available(*, deprecated, renamed: "clearPackage")
  public func clearSticker()
  public func clearPackage()
  @objc override dynamic public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SPUIButton : UIKit.UIButton {
  weak public var delegate: SPUIButtonDelegate?
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SPUIButton : UIKit.UIKeyInput {
  @objc dynamic public var hasText: Swift.Bool {
    @objc get
  }
  @objc dynamic public func insertText(_ text: Swift.String)
  @objc dynamic public func deleteBackward()
  @objc override dynamic public var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var canResignFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var inputView: UIKit.UIView? {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers public class SPUISearchViewController : UIKit.UIViewController {
  weak public var delegate: SPDelegate? {
    get
    set
  }
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SPUISearchViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
}
extension SPUISearchViewController : UIKit.UITextFieldDelegate {
  @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
public struct SPSticker : Swift.Identifiable, Swift.Hashable, Swift.Codable {
  public static func == (lhs: SPSticker, rhs: SPSticker) -> Swift.Bool
  public var id: Swift.Int
  public var stickerImg: Swift.String
  public var keyword: Swift.String?
  public init(id: Swift.Int, stickerImg: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public typealias ID = Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
extension SPViewType : Swift.Equatable {}
extension SPViewType : Swift.Hashable {}
extension SPUIThemeType : Swift.Equatable {}
extension SPUIThemeType : Swift.Hashable {}
